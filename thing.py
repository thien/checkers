
# 3x3
# [0, 4, 5, 8]
# [0, 1, 5, 8, 9]
# [1, 5, 6, 9]
# [1, 2, 6, 9, 10]
# [2, 6, 7, 10]
# [2, 3, 7, 10, 11]
# [4, 5, 8, 12, 13]
# [5, 8, 9, 13]
# [5, 6, 9, 13, 14]
# [6, 9, 10, 14]
# [6, 7, 10, 14, 15]
# [7, 10, 11, 15]
# [8, 12, 13, 16]
# [8, 9, 13, 16, 17]
# [9, 13, 14, 17]
# [9, 10, 14, 17, 18]
# [10, 14, 15, 18]
# [10, 11, 15, 18, 19]
# [12, 13, 16, 20, 21]
# [13, 16, 17, 21]
# [13, 14, 17, 21, 22]
# [14, 17, 18, 22]
# [14, 15, 18, 22, 23]
# [15, 18, 19, 23]
# [16, 20, 21, 24]
# [16, 17, 21, 24, 25]
# [17, 21, 22, 25]
# [17, 18, 22, 25, 26]
# [18, 22, 23, 26]
# [18, 19, 23, 26, 27]
# [20, 21, 24, 28, 29]
# [21, 24, 25, 29]
# [21, 22, 25, 29, 30]
# [22, 25, 26, 30]
# [22, 23, 26, 30, 31]
# [23, 26, 27, 31]
# [0, 1, 4, 5, 8, 9, 12, 13]
# [0, 1, 5, 6, 8, 9, 13, 14]
# [1, 2, 5, 6, 9, 10, 13, 14]
# [1, 2, 6, 7, 9, 10, 14, 15]
# [2, 3, 6, 7, 10, 11, 14, 15]
# [4, 5, 8, 9, 12, 13, 16, 17]
# [5, 6, 8, 9, 13, 14, 16, 17]
# [5, 6, 9, 10, 13, 14, 17, 18]
# [6, 7, 9, 10, 14, 15, 17, 18]
# [6, 7, 10, 11, 14, 15, 18, 19]
# [8, 9, 12, 13, 16, 17, 20, 21]
# [8, 9, 13, 14, 16, 17, 21, 22]
# [9, 10, 13, 14, 17, 18, 21, 22]
# [9, 10, 14, 15, 17, 18, 22, 23]
# [10, 11, 14, 15, 18, 19, 22, 23]
# [12, 13, 16, 17, 20, 21, 24, 25]
# [13, 14, 16, 17, 21, 22, 24, 25]
# [13, 14, 17, 18, 21, 22, 25, 26]
# [14, 15, 17, 18, 22, 23, 25, 26]
# [14, 15, 18, 19, 22, 23, 26, 27]
# [16, 17, 20, 21, 24, 25, 28, 29]
# [16, 17, 21, 22, 24, 25, 29, 30]
# [17, 18, 21, 22, 25, 26, 29, 30]
# [17, 18, 22, 23, 25, 26, 30, 31]
# [18, 19, 22, 23, 26, 27, 30, 31]
# [0, 1, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17]
# [0, 1, 2, 5, 6, 8, 9, 10, 13, 14, 16, 17, 18]
# [1, 2, 5, 6, 7, 9, 10, 13, 14, 15, 17, 18]
# [1, 2, 3, 6, 7, 9, 10, 11, 14, 15, 17, 18, 19]
# [4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 20, 21, 22]
# [5, 6, 8, 9, 10, 13, 14, 16, 17, 18, 21, 22]
# [5, 6, 7, 9, 10, 13, 14, 15, 17, 18, 21, 22, 23]
# [6, 7, 9, 10, 11, 14, 15, 17, 18, 19, 22, 23]
# [8, 9, 12, 13, 14, 16, 17, 20, 21, 22, 24, 25]
# [8, 9, 10, 13, 14, 16, 17, 18, 21, 22, 24, 25, 26]
# [9, 10, 13, 14, 15, 17, 18, 21, 22, 23, 25, 26]
# [9, 10, 11, 14, 15, 17, 18, 19, 22, 23, 25, 26, 27]
# [12, 13, 14, 16, 17, 20, 21, 22, 24, 25, 28, 29, 30]
# [13, 14, 16, 17, 18, 21, 22, 24, 25, 26, 29, 30]
# [13, 14, 15, 17, 18, 21, 22, 23, 25, 26, 29, 30, 31]
# [14, 15, 17, 18, 19, 22, 23, 25, 26, 27, 30, 31]
# [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22]
# [0, 1, 2, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 21, 22, 23]
# [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23]
# [4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26]
# [5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26]
# [5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27]
# [8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30]
# [8, 9, 10, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 29, 30, 31]
# [9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31]
# [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26]
# [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27]
# [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31]
# [5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31]
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]


# # kernel = 8

# lols = []
# for kernel in range(3,9):
#     for j in range(0,8-kernel+1):
#         for i in range(0,8-kernel+1):
#             ting = []
#             for k in range(0,kernel):
#                 for l in range(0,kernel):
#                     ting.append(board[j+l][i+k])
#             temp = []
            
#             for item in ting:
#                 if item != -1:
#                     temp.append(item)
#             temp.sort()
#             print(temp)
#             lols.append(temp)

# print(len(lols))


def subsquares(test_board):
    lols = []
    for kernel in range(3,9):
        for j in range(0,8-kernel+1):
            for i in range(0,8-kernel+1):
                ting = []
                for k in range(0,kernel):
                    for l in range(0,kernel):
                        ting.append(test_board[j+l][i+k])
                temp = []
                
                for item in ting:
                    x = np.array([1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], dtype=np.float32)
                    if item != -1:
                        temp.append(item)
                temp.sort()
                print(temp)
                lols.append(temp)
    print(len(lols))


test_board = [[-1, 0, -1, 1, -1, 2, -1, 3],
         [4, -1, 5, -1, 6, -1, 7, -1],
         [-1, 8, -1, 9, -1, 10, -1, 11],
         [12, -1, 13, -1, 14, -1, 15, -1],
         [-1, 16, -1, 17, -1, 18, -1, 19],
         [20, -1, 21, -1, 22, -1, 23, -1],
         [-1, 24, -1, 25, -1, 26, -1, 27],
         [28, -1, 29, -1, 30, -1, 31, -1]
        ]


# def sub(test_board):
#     lols = []
#     for kernel in range(3,9):
#         for j in range(0,8-kernel+1):
#             for i in range(0,8-kernel+1):
#                 ting = []
#                 for k in range(0,kernel):
#                     for l in range(0,kernel):
#                         ting.append(test_board[j+l][i+k])
#                 temp = []
                
#                 for item in ting:
#                     if item != -1:
#                         temp.append(item)
#                 temp.sort()
#                 print(temp)
#                 lols.append(temp)
#     # print(len(lols))


def addtotestBoard(x):
    null = -10
    fooArray = []
    for i in range(0,32,4):
        # find that item in the test board
        # check even
        subArray = []
        for j in range(0,4):
            # print(i+j)
            index = i+j
            subArray.append(null)
            # add index value of item in board.
            # subArray.append(index)
            # add value of board at index
            subArray.append(x[index])
        if ((i+4)/4)%2 == 0:
            subArray.pop(0)
            subArray.append(null)
        # print(subArray)
        # print((i+4)/4)
        # print(i/8)
        fooArray.append(subArray)
    return fooArray


def sub(test_board):
    null = -1
    lols = []
    # loop through kernel sizes
    for kernel in range(3,9):
        # loop through y of board
        for j in range(0,8-kernel+1):
            # loop through x of board
            for i in range(0,8-kernel+1):
                ting = []
                # create kernel
                for k in range(0,kernel):
                    for l in range(0,kernel):
                        ting.append(test_board[j+l][i+k])
                        # print(test_board[j+l][i+k])
                temp = []
                # print(ting)

                # filter null items
                for item in ting:
                    if item != null:
                        temp.append(item)
                temp.sort()

                temp.append(-len(temp))
                print(temp)

                temp = sum(temp)
                lols.append(temp)
    return lols


# manual input of the board.
def manual(x):
    # This is the fastest way (albeit also very ugly) i can think of to approach this problem
    return np.array([(x[0] + x[4] + x[5] + x[8]),(x[0] + x[1] + x[5] + x[8] + x[9]),(x[1] + x[5] + x[6] + x[9]),(x[1] + x[2] + x[6] + x[9] + x[10]),(x[2] + x[6] + x[7] + x[10]),(x[2] + x[3] + x[7] + x[10] + x[11]),(x[4] + x[5] + x[8] + x[12] + x[13]),(x[5] + x[8] + x[9] + x[13]),(x[5] + x[6] + x[9] + x[13] + x[14]),(x[6] + x[9] + x[10] + x[14]),(x[6] + x[7] + x[10] + x[14] + x[15]),(x[7] + x[10] + x[11] + x[15]),(x[8] + x[12] + x[13] + x[16]),(x[8] + x[9] + x[13] + x[16] + x[17]),(x[9] + x[13] + x[14] + x[17]),(x[9] + x[10] + x[14] + x[17] + x[18]),(x[10] + x[14] + x[15] + x[18]),(x[10] + x[11] + x[15] + x[18] + x[19]),(x[12] + x[13] + x[16] + x[20] + x[21]),(x[13] + x[16] + x[17] + x[21]),(x[13] + x[14] + x[17] + x[21] + x[22]),(x[14] + x[17] + x[18] + x[22]),(x[14] + x[15] + x[18] + x[22] + x[23]),(x[15] + x[18] + x[19] + x[23]),(x[16] + x[20] + x[21] + x[24]),(x[16] + x[17] + x[21] + x[24] + x[25]),(x[17] + x[21] + x[22] + x[25]),(x[17] + x[18] + x[22] + x[25] + x[26]),(x[18] + x[22] + x[23] + x[26]),(x[18] + x[19] + x[23] + x[26] + x[27]),(x[20] + x[21] + x[24] + x[28] + x[29]),(x[21] + x[24] + x[25] + x[29]),(x[21] + x[22] + x[25] + x[29] + x[30]),(x[22] + x[25] + x[26] + x[30]),(x[22] + x[23] + x[26] + x[30] + x[31]),(x[23] + x[26] + x[27] + x[31]),(x[0] + x[1] + x[4] + x[5] + x[8] + x[9] + x[12] + x[13]),(x[0] + x[1] + x[5] + x[6] + x[8] + x[9] + x[13] + x[14]),(x[1] + x[2] + x[5] + x[6] + x[9] + x[10] + x[13] + x[14]),(x[1] + x[2] + x[6] + x[7] + x[9] + x[10] + x[14] + x[15]),(x[2] + x[3] + x[6] + x[7] + x[10] + x[11] + x[14] + x[15]),(x[4] + x[5] + x[8] + x[9] + x[12] + x[13] + x[16] + x[17]),(x[5] + x[6] + x[8] + x[9] + x[13] + x[14] + x[16] + x[17]),(x[5] + x[6] + x[9] + x[10] + x[13] + x[14] + x[17] + x[18]),(x[6] + x[7] + x[9] + x[10] + x[14] + x[15] + x[17] + x[18]),(x[6] + x[7] + x[10] + x[11] + x[14] + x[15] + x[18] + x[19]),(x[8] + x[9] + x[12] + x[13] + x[16] + x[17] + x[20] + x[21]),(x[8] + x[9] + x[13] + x[14] + x[16] + x[17] + x[21] + x[22]),(x[9] + x[10] + x[13] + x[14] + x[17] + x[18] + x[21] + x[22]),(x[9] + x[10] + x[14] + x[15] + x[17] + x[18] + x[22] + x[23]),(x[10] + x[11] + x[14] + x[15] + x[18] + x[19] + x[22] + x[23]),(x[12] + x[13] + x[16] + x[17] + x[20] + x[21] + x[24] + x[25]),(x[13] + x[14] + x[16] + x[17] + x[21] + x[22] + x[24] + x[25]),(x[13] + x[14] + x[17] + x[18] + x[21] + x[22] + x[25] + x[26]),(x[14] + x[15] + x[17] + x[18] + x[22] + x[23] + x[25] + x[26]),(x[14] + x[15] + x[18] + x[19] + x[22] + x[23] + x[26] + x[27]),(x[16] + x[17] + x[20] + x[21] + x[24] + x[25] + x[28] + x[29]),(x[16] + x[17] + x[21] + x[22] + x[24] + x[25] + x[29] + x[30]),(x[17] + x[18] + x[21] + x[22] + x[25] + x[26] + x[29] + x[30]),(x[17] + x[18] + x[22] + x[23] + x[25] + x[26] + x[30] + x[31]),(x[18] + x[19] + x[22] + x[23] + x[26] + x[27] + x[30] + x[31]),(x[0] + x[1] + x[4] + x[5] + x[6] + x[8] + x[9] + x[12] + x[13] + x[14] + x[16] + x[17]),(x[0] + x[1] + x[2] + x[5] + x[6] + x[8] + x[9] + x[10] + x[13] + x[14] + x[16] + x[17] + x[18]),(x[1] + x[2] + x[5] + x[6] + x[7] + x[9] + x[10] + x[13] + x[14] + x[15] + x[17] + x[18]),(x[1] + x[2] + x[3] + x[6] + x[7] + x[9] + x[10] + x[11] + x[14] + x[15] + x[17] + x[18] + x[19]),(x[4] + x[5] + x[6] + x[8] + x[9] + x[12] + x[13] + x[14] + x[16] + x[17] + x[20] + x[21] + x[22]),(x[5] + x[6] + x[8] + x[9] + x[10] + x[13] + x[14] + x[16] + x[17] + x[18] + x[21] + x[22]),(x[5] + x[6] + x[7] + x[9] + x[10] + x[13] + x[14] + x[15] + x[17] + x[18] + x[21] + x[22] + x[23]),(x[6] + x[7] + x[9] + x[10] + x[11] + x[14] + x[15] + x[17] + x[18] + x[19] + x[22] + x[23]),(x[8] + x[9] + x[12] + x[13] + x[14] + x[16] + x[17] + x[20] + x[21] + x[22] + x[24] + x[25]),(x[8] + x[9] + x[10] + x[13] + x[14] + x[16] + x[17] + x[18] + x[21] + x[22] + x[24] + x[25] + x[26]),(x[9] + x[10] + x[13] + x[14] + x[15] + x[17] + x[18] + x[21] + x[22] + x[23] + x[25] + x[26]),(x[9] + x[10] + x[11] + x[14] + x[15] + x[17] + x[18] + x[19] + x[22] + x[23] + x[25] + x[26] + x[27]),(x[12] + x[13] + x[14] + x[16] + x[17] + x[20] + x[21] + x[22] + x[24] + x[25] + x[28] + x[29] + x[30]),(x[13] + x[14] + x[16] + x[17] + x[18] + x[21] + x[22] + x[24] + x[25] + x[26] + x[29] + x[30]),(x[13] + x[14] + x[15] + x[17] + x[18] + x[21] + x[22] + x[23] + x[25] + x[26] + x[29] + x[30] + x[31]),(x[14] + x[15] + x[17] + x[18] + x[19] + x[22] + x[23] + x[25] + x[26] + x[27] + x[30] + x[31]),(x[0] + x[1] + x[2] + x[4] + x[5] + x[6] + x[8] + x[9] + x[10] + x[12] + x[13] + x[14] + x[16] + x[17] + x[18] + x[20] + x[21] + x[22]),(x[0] + x[1] + x[2] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[21] + x[22] + x[23]),(x[1] + x[2] + x[3] + x[5] + x[6] + x[7] + x[9] + x[10] + x[11] + x[13] + x[14] + x[15] + x[17] + x[18] + x[19] + x[21] + x[22] + x[23]),(x[4] + x[5] + x[6] + x[8] + x[9] + x[10] + x[12] + x[13] + x[14] + x[16] + x[17] + x[18] + x[20] + x[21] + x[22] + x[24] + x[25] + x[26]),(x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[21] + x[22] + x[23] + x[24] + x[25] + x[26]),(x[5] + x[6] + x[7] + x[9] + x[10] + x[11] + x[13] + x[14] + x[15] + x[17] + x[18] + x[19] + x[21] + x[22] + x[23] + x[25] + x[26] + x[27]),(x[8] + x[9] + x[10] + x[12] + x[13] + x[14] + x[16] + x[17] + x[18] + x[20] + x[21] + x[22] + x[24] + x[25] + x[26] + x[28] + x[29] + x[30]),(x[8] + x[9] + x[10] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[21] + x[22] + x[23] + x[24] + x[25] + x[26] + x[29] + x[30] + x[31]),(x[9] + x[10] + x[11] + x[13] + x[14] + x[15] + x[17] + x[18] + x[19] + x[21] + x[22] + x[23] + x[25] + x[26] + x[27] + x[29] + x[30] + x[31]),(x[0] + x[1] + x[2] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[20] + x[21] + x[22] + x[23] + x[24] + x[25] + x[26]),(x[0] + x[1] + x[2] + x[3] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19] + x[21] + x[22] + x[23] + x[24] + x[25] + x[26] + x[27]),(x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[20] + x[21] + x[22] + x[23] + x[24] + x[25] + x[26] + x[28] + x[29] + x[30] + x[31]),(x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19] + x[21] + x[22] + x[23] + x[24] + x[25] + x[26] + x[27] + x[29] + x[30] + x[31]),(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[10] + x[11] + x[12] + x[13] + x[14] + x[15] + x[16] + x[17] + x[18] + x[19] + x[20] + x[21] + x[22] + x[23] + x[24] + x[25] + x[26] + x[27] + x[28] + x[29] + x[30] + x[31])])


import numpy as np
x = np.array([1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], dtype=np.float32)


# import time
# # how fast is this?
# k = addtotestBoard(x)
# start = time.time()
# one = sub(k)

one = sub(test_board)
# end = time.time()

# c1 = end-start
# print(c1)


# start = time.time()

# # how fast is this?
# two = manual(x)

# end = time.time()
# c2 = end-start
# print(c2)


# if set(one) == set(two):
#     print("same")
# # print(manual(x))
# # print(np.sum(x))

# print(c1/c2)